#include <Adafruit_NeoPixel.h>
#include <stdio.h>
#include <DS1302.h>

//sprawdzić czy ta biblioteka jest niezbędna:
//#ifdef __AVR__
//  #include <avr/power.h>
//#endif

#define PIN            8
#define NUMPIXELS      60
#define BRIGHTNESS 50 
#define DELAYVAL 500
Adafruit_NeoPixel pixels = Adafruit_NeoPixel(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);
//Adafruit_NeoPixel pixels = Adafruit_NeoPixel(60, PIN, NEO_GRB + NEO_KHZ800);

#define kCePin  5  // Chip Enable
#define kIoPin   6  // Input/Output
#define kSclkPin 7  // Serial Clock

byte yhour1;
byte ymin1;
byte hour1;
byte min1;
byte seconds;
byte control=0;
byte mode=0;

 DS1302 rtc(kCePin, kIoPin, kSclkPin); //RTC module 

//Colors sec, min, h
void printTime() {
  Time t = rtc.time(); // < time from RTC module 
  hour1=t.hr;
  min1=t.min;
  seconds=t.sec; 
  if(hour1>=12)
    {
      hour1=hour1-12; //resetting the hours
    }
  pixels.setPixelColor(5*hour1, pixels.Color(25,25,255)); //colors of hour
  pixels.setPixelColor(min1, pixels.Color(0,200,10)); //colors of minutes
  pixels.setPixelColor(seconds, pixels.Color(255,0,0)); //colors of seconds
  
  pixels.show();

  //animations of seconds:
  if(seconds==0)
   { 
    pixels.setPixelColor(min1-1, pixels.Color(0,0,0));
    pixels.setPixelColor(min1, pixels.Color(0,200,10));
     pixels.show();
    for(int i=1;i<60;i++)
      {
    pixels.setPixelColor(i, pixels.Color(0,0,0));
      }
    }
//animations of minutes
   if(min1==0)
  { 
    pixels.setPixelColor(59, pixels.Color(0,0,0)); //cleaning led's
    }
}


//animation, button "up"
void animation()
{
  colorWipe(pixels.Color(255, 0, 0), 25); // Red
  colorWipe(pixels.Color(0, 255, 0), 25); // Green
  colorWipe(pixels.Color(0, 0, 255), 25);
  rainbow(10);
  theaterChaseRainbow(50);
//    theaterChase(pixels.Color(127, 127, 127), 50); // White
//  theaterChase(pixels.Color(127, 0, 0), 50); // Red
//  theaterChase(pixels.Color(0, 0, 127), 50);
  for(int i=1;i<60;i++)  //clear pixels after animation
      {
   pixels.setPixelColor(i, pixels.Color(0,0,0));
     }
  
 }
 // colorWipe animation - to understand....
 void colorWipe(uint32_t color, int wait) {     // c = color of leds
  for(int i=0; i<pixels.numPixels(); i++) {    // t = time 
    pixels.setPixelColor(i, color);
    pixels.show();
    delay(wait);
  }
}
//theaterChade animation - to understand...
// Theater-marquee-style chasing lights. Pass in a color (32-bit value,
// a la strip.Color(r,g,b) as mentioned above), and a delay time (in ms)
// between frames..
  void theaterChase(uint32_t color, uint8_t wait) {         // c = color of leds
  for (int a=0; a<10; a++) {  //do 10 cycles of chasing
    for (int b=0; b < 3; b++) {
    
      // 'c' counts up from 'b' to end of strip in steps of 3...
      for (int c=b; c < pixels.numPixels(); c+= 3) {
        pixels.setPixelColor(c, color);    //turn every third pixel (q)
      }
      pixels.show();
      delay(wait);

         for (uint16_t i=0; i < pixels.numPixels(); i=i+3) {        // t = time 
        pixels.setPixelColor(i+b, 0);        //turn every third pixel off
     }
    }
  }
}

void rainbow(int wait) {
 for(long firstPixelHue = 0; firstPixelHue < 5*65536; firstPixelHue += 256) {
pixels.rainbow(firstPixelHue);
 pixels.show(); // Update strip with new contents
    delay(wait);  // Pause for a moment
  }
}

void theaterChaseRainbow(int wait) {
  int firstPixelHue = 0;     // First pixel starts at red (hue 0)
  for(int a=0; a<30; a++) {  // Repeat 30 times...
    for(int b=0; b<3; b++) { //  'b' counts from 0 to 2...
      pixels.clear();         //   Set all pixels in RAM to 0 (off)
      // 'c' counts up from 'b' to end of strip in increments of 3...
      for(int c=b; c<pixels.numPixels(); c += 3) {
        // hue of pixel 'c' is offset by an amount to make one full
        // revolution of the color wheel (range 65536) along the length
        // of the strip (strip.numPixels() steps):
        int      hue   = firstPixelHue + c * 65536L / pixels.numPixels();
        uint32_t color = pixels.gamma32(pixels.ColorHSV(hue)); // hue -> RGB
        pixels.setPixelColor(c, color); // Set pixel 'c' to value 'color'
      }
      pixels.show();                // Update strip with new contents
      delay(wait);                 // Pause for a moment
      firstPixelHue += 65536 / 90; // One cycle of color wheel over 90 frames
    }
  }
}

//RTC:
  void newhour1()
    {
 //control=0;
    hour1=yhour1;
    min1=ymin1;
    Time t(2021, 5, 23,yhour1, ymin1, 0, Time::kFriday); //start time
    rtc.time(t);
    }
  
//buttons:
 int clockSet =10;
 int up=11;
 int down=12;

void setup() {
  Serial.begin(9600);
#if defined (__AVR_ATtiny85__)
  if (F_CPU == 16000000) clock_prescale_set(clock_div_1); //definition of a microcontroller clock
#endif
pixels.begin();
  pixels.show();
pixels.begin();

pinMode( clockSet,INPUT); //button clocset

 //to understand...
  rtc.writeProtect(false);
  rtc.halt(false);


  //my led's
  #if defined(__AVR_ATtiny85__) && (F_CPU == 16000000)
  clock_prescale_set(clock_div_1);
#endif

  pixels.begin(); // INITIALIZE NeoPixel pixels object (REQUIRED)
}

//pressing buttons: 
void loop() {
  //change time:
    //1st press:
  if (control==1)
    {
        pixels.setPixelColor(5*yhour1, pixels.Color(25,25,255));
        pixels.show();
        delay(100);
        pixels.setPixelColor(5*yhour1, pixels.Color(0,0,0));
        pixels.show();
        delay(100);
        if (digitalRead(up)==HIGH)
        {
          yhour1++;
          while(digitalRead(up)==HIGH);
          if(yhour1==12)
          {
            yhour1=0; //reset hour
          }
        }
        if (digitalRead(down)==HIGH)
        {
          yhour1--;
          while(digitalRead(down)==HIGH);
          if(yhour1==255)
          {
            yhour1=11;
          }
        }
   
      pixels.setPixelColor(5*yhour1, pixels.Color(25,25,255));
      pixels.show();
      delay(100);
      pixels.setPixelColor(5*yhour1, pixels.Color(0,0,0));
      pixels.show();
      delay(100);
      newhour1();
      if(digitalRead(clockSet)==HIGH)
      { 
        while(digitalRead(clockSet)==HIGH)
        { pixels.setPixelColor(control, pixels.Color(255,255,255));
         pixels.show();
         }
       pixels.setPixelColor(control, pixels.Color(0,0,0));
       pixels.show();
       control++;
       yhour1=hour1;ymin1=min1;
       }
   }

       //2th press:
   if (control==2)
      {
        if(digitalRead(clockSet)==HIGH)
          { 
            control++;
          while(digitalRead(clockSet)==HIGH)
          {    }
           
           yhour1=hour1;ymin1=min1;
           }
       
      if (digitalRead(up)==HIGH)
        {
          ymin1++;
          while(digitalRead(up)==HIGH);
          if(ymin1==60)
          {
            yhour1=0; //reset minutes
          }
        }
      if (digitalRead(down)==HIGH)
        {
          ymin1--;
          while(digitalRead(down)==HIGH);
          if(ymin1==255)
          {
            ymin1=59;
          }
        } 
      pixels.setPixelColor(ymin1, pixels.Color(0,205,10));
      pixels.show();
      newhour1();
      delay(100);
      pixels.setPixelColor(ymin1, pixels.Color(0,0,0));
      pixels.show();
      delay(100); 
        }
        //3rd press:
    if (control==3)
    {
      control=0;
       newhour1();
    }

  if (mode==1)
      {
          colorWipe(pixels.Color(255, 0, 0), 25); //red
          pixels.show();
          Serial.println(mode);
          
          if(digitalRead(down)==HIGH)
          {Serial.println("jestem w mode1");
            if (digitalRead(down)==HIGH)
            {Serial.println("jestem w po przycisku down");
            colorWipe(pixels.Color(0, 255, 0), 40);//green
            pixels.show();
            mode++;
            Serial.println(mode);
            }
          }
           if (digitalRead(clockSet)==HIGH)
            {
              colorWipe(pixels.Color(0, 0, 0), 40);
               mode=0;
            }
      }
           

     if (mode ==2)
          {
            Serial.println("jestem w mode2");
            if (digitalRead(down)==HIGH)
            {Serial.println("jestem po drugim przycisku down");
            colorWipe(pixels.Color(0, 0, 255), 40); //blue
            pixels.show();
            mode++;
            Serial.println(mode);
              }
            if (digitalRead(clockSet)==HIGH)
            {
              colorWipe(pixels.Color(0, 0, 0), 40);
               mode=0;
            }
          }
       if (mode ==3)
          {
            Serial.println("jestem w mode3");
            if (digitalRead(down)==HIGH)
            {Serial.println("jestem po 3 przycisku down");
            colorWipe(pixels.Color(127, 127, 127), 40); //white, to ostatnie to prędkość
            pixels.show();
            mode++;
            Serial.println(mode);
            }
            if (digitalRead(clockSet)==HIGH)
            {
              colorWipe(pixels.Color(0, 0, 0), 40);
               mode=0;
            }
          }

         if (mode ==4)
          {
            Serial.println("jestem w mode3");
            if (digitalRead(down)==HIGH)
            {Serial.println("jestem po 4 przycisku down");
            rainbow(10);
            pixels.show();
            mode++;
            Serial.println(mode);
             }
            if (digitalRead(clockSet)==HIGH)
            {
              colorWipe(pixels.Color(0, 0, 0), 40);
              mode=0;
            }
          }
           
        if(mode==5)
        { if (digitalRead(down)==HIGH)
          { Serial.println("mode 5");
          colorWipe(pixels.Color(0, 0, 0), 40);
          mode=0;
          
          }
       }
  while (control==0 and mode==0)
  {
    if(digitalRead(up)==HIGH)
      {
        animation ();
      }
      
    if (digitalRead(down) == HIGH)
      {
        mode = 1;
//          //my animation - in progress....
//            pixels.clear(); // Set all pixel colors to 'off'
//            for(int i=0; i<NUMPIXELS; i++) { // For each pixel...
//             pixels.setPixelColor(i, pixels.Color(0, 150, 0));
//             pixels.show();  
//             delay(200);
//                if( i<59)
//                {
//               pixels.setPixelColor(i, pixels.Color(0,0,0));
//                 }
//          }
      }
      
    if(digitalRead(clockSet)==HIGH)
      { 
        control++;
      while(digitalRead(clockSet)==HIGH);
      yhour1=hour1;ymin1=min1;}
      printTime();
      }
}
